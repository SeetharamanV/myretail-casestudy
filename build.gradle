buildscript {
    ext {
        is_ci_active = false
    }
    repositories {
        maven {
            url = "https://plugins.gradle.org/m2/"
        }
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath "com.avast.gradle:gradle-docker-compose-plugin:${docker_plugin_version}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlin_version}")
        classpath "org.jetbrains.kotlin:kotlin-noarg:${kotlin_version}"
    }
}

plugins {
    id 'org.springframework.boot' version "$spring_boot_version"
    id "io.spring.dependency-management" version "$spring_dependency_plugin_version"
    id 'org.jetbrains.kotlin.jvm' version "$kotlin_version"
    id "org.jetbrains.kotlin.plugin.spring" version "$kotlin_version"
    id "org.jetbrains.kotlin.plugin.jpa" version "$kotlin_version"
    id 'groovy'
    id 'jacoco'
    id 'java'
    id 'eclipse'
    id 'application'
    id 'org.jetbrains.kotlin.plugin.allopen' version "$kotlin_version"
    id 'org.jetbrains.kotlin.plugin.noarg' version "$kotlin_version"
    id 'org.jlleitschuh.gradle.ktlint' version "$ktlint_version"
//    id 'com.gorylenko.gradle-git-properties' version "$git_properties_version"
}

apply plugin: 'groovy'
apply plugin: 'jacoco'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.avast.gradle.docker-compose'

group = "com.myretail"
version = "0.0.1-SNAPSHOT"
application.mainClass = "com.myretail.products.MyRetailApplicationKt"

distTar.archiveVersion.set("")
jar.enabled = true

dependencies {
    implementation(
        "org.jetbrains.kotlin:kotlin-reflect:${kotlin_version}",
        "com.fasterxml.jackson.module:jackson-module-kotlin:2.14.3",
        "org.jetbrains.kotlin:kotlin-stdlib-jdk8",

        //Swagger
        "io.springfox:springfox-swagger-ui:${swagger_version}",
        "io.springfox:springfox-boot-starter:${swagger_version}",
        "io.springfox:springfox-swagger2:${swagger_version}",
        "org.springframework.boot:spring-boot-starter-parent:${spring_boot_version}",
        "org.springframework.boot:spring-boot-starter-actuator:${spring_boot_version}",
        "org.springframework.boot:spring-boot-starter-web:${spring_boot_version}",
        "org.springframework.boot:spring-boot-starter-validation",
        "org.springframework.boot:spring-boot-configuration-processor",
        "org.springframework:spring-aspects:6.0.7",

        "io.micrometer:micrometer-core",
        "io.micrometer:micrometer-registry-prometheus",

        // Retrofit
        "com.squareup.retrofit2:retrofit:${retrofit_version}",
        "com.squareup.retrofit2:converter-jackson:${retrofit_version}",

        // Mongo
        "org.springframework.boot:spring-boot-starter-data-mongodb",

        //Mongock
        "com.github.cloudyrock.mongock:mongock-bom:${mongock_version}",
        "com.github.cloudyrock.mongock:mongock-spring-v5:${mongock_version}",
        "com.github.cloudyrock.mongock:mongodb-springdata-v2-driver:${mongock_version}",

        "org.slf4j:slf4j-api:1.7.32",
        "org.slf4j:slf4j-log4j12:1.7.32",
        "org.yaml:snakeyaml:2.0"
    )
    testImplementation(
        "org.springframework.boot:spring-boot-starter-test",
        "org.codehaus.groovy:groovy-all:${groovy_version}",
        "org.spockframework:spock-core:${spock_version}",
        "org.spockframework:spock-spring:${spock_version}",
        "org.slf4j:slf4j-simple:1.7.30",
        "com.github.tomakehurst:wiremock-jre8-standalone:2.23.2",
        "com.github.tomakehurst:wiremock-jre8:2.27.2",
        "com.github.tomjankes:wiremock-groovy:0.2.0",
        "org.jeasy:easy-random-core:4.2.0",
        "net.javacrumbs.json-unit:json-unit:2.24.0"
    )
/*    constraints {
        implementation("org.slf4j:slf4j-api:1.7.32")
        implementation("org.slf4j:slf4j-log4j12:1.7.32")
    }*/

}

configurations.all {
    exclude group: 'ch.qos.logback'
    exclude group: 'org.apache.logging.log4j'
    exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
}

repositories {
    mavenCentral()
    jcenter()
    maven {
        url = "https://plugins.gradle.org/m2/"
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }
}

sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
    test.kotlin.srcDirs += 'src/test/kotlin'
    integrationTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }
}
configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter test
    maxHeapSize = '1G'
    testLogging {
        events "passed", "failed"
    }
}

if (!is_ci_active) {
    dockerCompose {
        useComposeFiles = ['gradle/docker-compose.yml']
    }
    integrationTest.dependsOn 'composeUp'
    integrationTest.finalizedBy 'composeDown'
}

tasks.withType(Test) {
    outputs.upToDateWhen { false }
    finalizedBy(jacocoTestReport)
    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
        events "passed", "failed"
    }
}

jacoco {
    toolVersion = "$jacoco_version"
}

tasks.withType(JacocoReportBase) {
    executionData(test, integrationTest)
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                "**/configs/**",
                "**/entities/**",
                "**/exceptions/**",
                "**/models/**",
                "**/security/**",
                "**/repositories/**",
                "**/MyRetailApplication**"
            ])
        }))
    }
}

jacocoTestReport {
    getExecutionData().setFrom(fileTree(buildDir).include("/jacoco/*.exec"))
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
        html.destination file("$buildDir/jacocoHtmlReport")
    }
    doLast {
        println("See Jacoco Test Coverage Report at: file://$buildDir/jacocoHtmlReport/index.html")
    }
}

jacocoTestCoverageVerification {
    getExecutionData().setFrom(fileTree(buildDir).include("/jacoco/*.exec"))
    violationRules {
        rule {
            enabled = true
            element = 'BUNDLE'
            limit {
                counter = 'BRANCH'
                minimum = 0.80
            }
        }
    }
}

ktlint {
    disabledRules = ["import-ordering"]
}

check.dependsOn(['integrationTest', 'jacocoTestCoverageVerification', 'jacocoTestReport'])

test.finalizedBy(jacocoTestReport)
